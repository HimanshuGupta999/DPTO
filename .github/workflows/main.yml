name: Distributed Load Test Pipeline

on:
  workflow_dispatch:

jobs:
  run-test:
    runs-on: ubuntu-latest

    env:
      JMETER_VERSION: ${{ secrets.JMETER_VERSION }}
      MASTER_IP: ${{ secrets.MASTER_IP }}
      SLAVE_IPS: ${{ secrets.SLAVE_IPS }}
      JMETER_DIR: ${{ secrets.JMETER_DIR }}
      SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
      SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
      TEST_PLAN_PATH: ${{ secrets.TEST_PLAN_PATH }}
      RESULT_PATH: ${{ secrets.RESULT_PATH }}
      NUMBER_OF_THREADS: ${{ secrets.NUMBER_OF_THREADS }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Navigate to distributed-performance-testing
        working-directory: ./distributed-performance-testing
        run: echo "Entered project directory"

      - name: Create .env file from secrets
        working-directory: ./distributed-performance-testing
        run: |
          cat <<EOF > .env
          JMETER_VERSION=${JMETER_VERSION}
          MASTER_IP=${MASTER_IP}
          SLAVE_IPS=${SLAVE_IPS}
          JMETER_DIR=${JMETER_DIR}
          SSH_USERNAME=${SSH_USERNAME}
          SSH_PASSWORD=${SSH_PASSWORD}
          TEST_PLAN_PATH=${TEST_PLAN_PATH}
          RESULT_PATH=${RESULT_PATH}
          NUMBER_OF_THREADS=${NUMBER_OF_THREADS}
          EOF

      - name: Install npm dependencies
        working-directory: ./distributed-performance-testing
        run: npm install

      - name: Install Docker and Docker Compose
        run: |
          sudo apt-get update
          sudo apt install docker
          sudo systemctl start docker
          sudo systemctl enable docker
          docker --version
          
      - name: (Optional) Build and start Docker containers
        working-directory: ./distributed-performance-testing
        run: docker-compose up --build -d
